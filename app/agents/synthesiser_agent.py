"""SynthesiserAgent â€“ compiles final markdown report.

MVP strategy: payload may include pointers or simply rely on earlier artifacts
stored elsewhere. For now, it creates a placeholder report linking to artifacts.
"""

from __future__ import annotations

import datetime as dt
import logging
from typing import Any

from app.core import Artifact, Task, TaskStatus, TextPart

from .base import BaseAgent

logger = logging.getLogger(__name__)

DEFAULT_REPORT_TEMPLATE = """
# PEFT Research Report

**Generated by**: {agent_id}
**Timestamp**: {timestamp}

---

*(This is a placeholder synthesis. Refer to previous artifacts for details.)*
"""


class SynthesiserAgent(BaseAgent):
    async def _handle(self, task: Task) -> None:  # noqa: D401
        if task.task_type != "Synthesise_Report":
            return

        # --- Specialization: Use a configured report template ---
        template = self.config.get("report_template", DEFAULT_REPORT_TEMPLATE)
        logger.info(f"Synthesiser {self.agent_id} using custom report template.")

        timestamp = dt.datetime.utcnow().isoformat()
        
        report_md = template.format(
            timestamp=timestamp,
            agent_id=self.agent_id
        )

        artifact = Artifact(name="report", parts=[TextPart(text=report_md)])
        task.status = TaskStatus.completed
        task.artifacts = [artifact]

        await self._emit_karma(self.agent_id, +1, reason="report-done")

        logger.info("%s produced final report", self.agent_id) 